/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { NzSafeAny } from 'ng-zorro-antd/core/types';
import { BehaviorSubject } from 'rxjs';
import { NzTreeNode, NzTreeNodeKey } from './nz-tree-base-node';
import { NzFormatEmitEvent } from './nz-tree-base.definitions';
import * as ɵngcc0 from '@angular/core';
export declare class NzTreeBaseService {
    DRAG_SIDE_RANGE: number;
    DRAG_MIN_GAP: number;
    isCheckStrictly: boolean;
    isMultiple: boolean;
    selectedNode: NzTreeNode;
    rootNodes: NzTreeNode[];
    flattenNodes$: BehaviorSubject<NzTreeNode[]>;
    selectedNodeList: NzTreeNode[];
    expandedNodeList: NzTreeNode[];
    checkedNodeList: NzTreeNode[];
    halfCheckedNodeList: NzTreeNode[];
    matchedNodeList: NzTreeNode[];
    /**
     * reset tree nodes will clear default node list
     */
    initTree(nzNodes: NzTreeNode[]): void;
    flattenTreeData(nzNodes: NzTreeNode[], expandedKeys?: NzTreeNodeKey[] | true): void;
    getSelectedNode(): NzTreeNode | null;
    /**
     * get some list
     */
    getSelectedNodeList(): NzTreeNode[];
    /**
     * return checked nodes
     */
    getCheckedNodeList(): NzTreeNode[];
    getHalfCheckedNodeList(): NzTreeNode[];
    /**
     * return expanded nodes
     */
    getExpandedNodeList(): NzTreeNode[];
    /**
     * return search matched nodes
     */
    getMatchedNodeList(): NzTreeNode[];
    isArrayOfNzTreeNode(value: NzSafeAny[]): boolean;
    /**
     * set drag node
     */
    setSelectedNode(node: NzTreeNode): void;
    /**
     * set node selected status
     */
    setNodeActive(node: NzTreeNode): void;
    /**
     * add or remove node to selectedNodeList
     */
    setSelectedNodeList(node: NzTreeNode, isMultiple?: boolean): void;
    /**
     * merge checked nodes
     */
    setHalfCheckedNodeList(node: NzTreeNode): void;
    setCheckedNodeList(node: NzTreeNode): void;
    /**
     * conduct checked/selected/expanded keys
     */
    conductNodeState(type?: string): NzTreeNode[];
    /**
     * set expanded nodes
     */
    setExpandedNodeList(node: NzTreeNode): void;
    setMatchedNodeList(node: NzTreeNode): void;
    /**
     * check state
     * @param isCheckStrictly
     */
    refreshCheckState(isCheckStrictly?: boolean): void;
    conduct(node: NzTreeNode, isCheckStrictly?: boolean): void;
    /**
     * 1、children half checked
     * 2、children all checked, parent checked
     * 3、no children checked
     */
    conductUp(node: NzTreeNode): void;
    /**
     * reset child check state
     */
    conductDown(node: NzTreeNode, value: boolean): void;
    /**
     * flush after delete node
     */
    afterRemove(nodes: NzTreeNode[]): void;
    /**
     * drag event
     */
    refreshDragNode(node: NzTreeNode): void;
    resetNodeLevel(node: NzTreeNode): void;
    calcDropPosition(event: DragEvent): number;
    /**
     * drop
     * 0: inner -1: pre 1: next
     */
    dropAndApply(targetNode: NzTreeNode, dragPos?: number): void;
    /**
     * emit Structure
     * eventName
     * node
     * event: MouseEvent / DragEvent
     * dragNode
     */
    formatEvent(eventName: string, node: NzTreeNode | null, event: MouseEvent | DragEvent | null): NzFormatEmitEvent;
    /**
     * New functions for flatten nodes
     */
    getIndexOfArray(list: NzTreeNode[], key: string): number;
    /**
     * Render by nzCheckedKeys
     * When keys equals null, just render with checkStrictly
     * @param keys
     * @param checkStrictly
     */
    conductCheck(keys: NzTreeNodeKey[] | null, checkStrictly: boolean): void;
    conductExpandedKeys(keys?: NzTreeNodeKey[] | true): void;
    conductSelectedKeys(keys: NzTreeNodeKey[], isMulti: boolean): void;
    /**
     * Expand parent nodes by child node
     * @param node
     */
    expandNodeAllParentBySearch(node: NzTreeNode): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzTreeBaseService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NzTreeBaseService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnotdHJlZS1iYXNlLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsibnotdHJlZS1iYXNlLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0hBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cbmltcG9ydCB7IE56U2FmZUFueSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS90eXBlcyc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE56VHJlZU5vZGUsIE56VHJlZU5vZGVLZXkgfSBmcm9tICcuL256LXRyZWUtYmFzZS1ub2RlJztcbmltcG9ydCB7IE56Rm9ybWF0RW1pdEV2ZW50IH0gZnJvbSAnLi9uei10cmVlLWJhc2UuZGVmaW5pdGlvbnMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTnpUcmVlQmFzZVNlcnZpY2Uge1xuICAgIERSQUdfU0lERV9SQU5HRTogbnVtYmVyO1xuICAgIERSQUdfTUlOX0dBUDogbnVtYmVyO1xuICAgIGlzQ2hlY2tTdHJpY3RseTogYm9vbGVhbjtcbiAgICBpc011bHRpcGxlOiBib29sZWFuO1xuICAgIHNlbGVjdGVkTm9kZTogTnpUcmVlTm9kZTtcbiAgICByb290Tm9kZXM6IE56VHJlZU5vZGVbXTtcbiAgICBmbGF0dGVuTm9kZXMkOiBCZWhhdmlvclN1YmplY3Q8TnpUcmVlTm9kZVtdPjtcbiAgICBzZWxlY3RlZE5vZGVMaXN0OiBOelRyZWVOb2RlW107XG4gICAgZXhwYW5kZWROb2RlTGlzdDogTnpUcmVlTm9kZVtdO1xuICAgIGNoZWNrZWROb2RlTGlzdDogTnpUcmVlTm9kZVtdO1xuICAgIGhhbGZDaGVja2VkTm9kZUxpc3Q6IE56VHJlZU5vZGVbXTtcbiAgICBtYXRjaGVkTm9kZUxpc3Q6IE56VHJlZU5vZGVbXTtcbiAgICAvKipcbiAgICAgKiByZXNldCB0cmVlIG5vZGVzIHdpbGwgY2xlYXIgZGVmYXVsdCBub2RlIGxpc3RcbiAgICAgKi9cbiAgICBpbml0VHJlZShuek5vZGVzOiBOelRyZWVOb2RlW10pOiB2b2lkO1xuICAgIGZsYXR0ZW5UcmVlRGF0YShuek5vZGVzOiBOelRyZWVOb2RlW10sIGV4cGFuZGVkS2V5cz86IE56VHJlZU5vZGVLZXlbXSB8IHRydWUpOiB2b2lkO1xuICAgIGdldFNlbGVjdGVkTm9kZSgpOiBOelRyZWVOb2RlIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBnZXQgc29tZSBsaXN0XG4gICAgICovXG4gICAgZ2V0U2VsZWN0ZWROb2RlTGlzdCgpOiBOelRyZWVOb2RlW107XG4gICAgLyoqXG4gICAgICogcmV0dXJuIGNoZWNrZWQgbm9kZXNcbiAgICAgKi9cbiAgICBnZXRDaGVja2VkTm9kZUxpc3QoKTogTnpUcmVlTm9kZVtdO1xuICAgIGdldEhhbGZDaGVja2VkTm9kZUxpc3QoKTogTnpUcmVlTm9kZVtdO1xuICAgIC8qKlxuICAgICAqIHJldHVybiBleHBhbmRlZCBub2Rlc1xuICAgICAqL1xuICAgIGdldEV4cGFuZGVkTm9kZUxpc3QoKTogTnpUcmVlTm9kZVtdO1xuICAgIC8qKlxuICAgICAqIHJldHVybiBzZWFyY2ggbWF0Y2hlZCBub2Rlc1xuICAgICAqL1xuICAgIGdldE1hdGNoZWROb2RlTGlzdCgpOiBOelRyZWVOb2RlW107XG4gICAgaXNBcnJheU9mTnpUcmVlTm9kZSh2YWx1ZTogTnpTYWZlQW55W10pOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIHNldCBkcmFnIG5vZGVcbiAgICAgKi9cbiAgICBzZXRTZWxlY3RlZE5vZGUobm9kZTogTnpUcmVlTm9kZSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogc2V0IG5vZGUgc2VsZWN0ZWQgc3RhdHVzXG4gICAgICovXG4gICAgc2V0Tm9kZUFjdGl2ZShub2RlOiBOelRyZWVOb2RlKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBhZGQgb3IgcmVtb3ZlIG5vZGUgdG8gc2VsZWN0ZWROb2RlTGlzdFxuICAgICAqL1xuICAgIHNldFNlbGVjdGVkTm9kZUxpc3Qobm9kZTogTnpUcmVlTm9kZSwgaXNNdWx0aXBsZT86IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIG1lcmdlIGNoZWNrZWQgbm9kZXNcbiAgICAgKi9cbiAgICBzZXRIYWxmQ2hlY2tlZE5vZGVMaXN0KG5vZGU6IE56VHJlZU5vZGUpOiB2b2lkO1xuICAgIHNldENoZWNrZWROb2RlTGlzdChub2RlOiBOelRyZWVOb2RlKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBjb25kdWN0IGNoZWNrZWQvc2VsZWN0ZWQvZXhwYW5kZWQga2V5c1xuICAgICAqL1xuICAgIGNvbmR1Y3ROb2RlU3RhdGUodHlwZT86IHN0cmluZyk6IE56VHJlZU5vZGVbXTtcbiAgICAvKipcbiAgICAgKiBzZXQgZXhwYW5kZWQgbm9kZXNcbiAgICAgKi9cbiAgICBzZXRFeHBhbmRlZE5vZGVMaXN0KG5vZGU6IE56VHJlZU5vZGUpOiB2b2lkO1xuICAgIHNldE1hdGNoZWROb2RlTGlzdChub2RlOiBOelRyZWVOb2RlKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBjaGVjayBzdGF0ZVxuICAgICAqIEBwYXJhbSBpc0NoZWNrU3RyaWN0bHlcbiAgICAgKi9cbiAgICByZWZyZXNoQ2hlY2tTdGF0ZShpc0NoZWNrU3RyaWN0bHk/OiBib29sZWFuKTogdm9pZDtcbiAgICBjb25kdWN0KG5vZGU6IE56VHJlZU5vZGUsIGlzQ2hlY2tTdHJpY3RseT86IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIDHjgIFjaGlsZHJlbiBoYWxmIGNoZWNrZWRcbiAgICAgKiAy44CBY2hpbGRyZW4gYWxsIGNoZWNrZWQsIHBhcmVudCBjaGVja2VkXG4gICAgICogM+OAgW5vIGNoaWxkcmVuIGNoZWNrZWRcbiAgICAgKi9cbiAgICBjb25kdWN0VXAobm9kZTogTnpUcmVlTm9kZSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogcmVzZXQgY2hpbGQgY2hlY2sgc3RhdGVcbiAgICAgKi9cbiAgICBjb25kdWN0RG93bihub2RlOiBOelRyZWVOb2RlLCB2YWx1ZTogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogZmx1c2ggYWZ0ZXIgZGVsZXRlIG5vZGVcbiAgICAgKi9cbiAgICBhZnRlclJlbW92ZShub2RlczogTnpUcmVlTm9kZVtdKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBkcmFnIGV2ZW50XG4gICAgICovXG4gICAgcmVmcmVzaERyYWdOb2RlKG5vZGU6IE56VHJlZU5vZGUpOiB2b2lkO1xuICAgIHJlc2V0Tm9kZUxldmVsKG5vZGU6IE56VHJlZU5vZGUpOiB2b2lkO1xuICAgIGNhbGNEcm9wUG9zaXRpb24oZXZlbnQ6IERyYWdFdmVudCk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBkcm9wXG4gICAgICogMDogaW5uZXIgLTE6IHByZSAxOiBuZXh0XG4gICAgICovXG4gICAgZHJvcEFuZEFwcGx5KHRhcmdldE5vZGU6IE56VHJlZU5vZGUsIGRyYWdQb3M/OiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIGVtaXQgU3RydWN0dXJlXG4gICAgICogZXZlbnROYW1lXG4gICAgICogbm9kZVxuICAgICAqIGV2ZW50OiBNb3VzZUV2ZW50IC8gRHJhZ0V2ZW50XG4gICAgICogZHJhZ05vZGVcbiAgICAgKi9cbiAgICBmb3JtYXRFdmVudChldmVudE5hbWU6IHN0cmluZywgbm9kZTogTnpUcmVlTm9kZSB8IG51bGwsIGV2ZW50OiBNb3VzZUV2ZW50IHwgRHJhZ0V2ZW50IHwgbnVsbCk6IE56Rm9ybWF0RW1pdEV2ZW50O1xuICAgIC8qKlxuICAgICAqIE5ldyBmdW5jdGlvbnMgZm9yIGZsYXR0ZW4gbm9kZXNcbiAgICAgKi9cbiAgICBnZXRJbmRleE9mQXJyYXkobGlzdDogTnpUcmVlTm9kZVtdLCBrZXk6IHN0cmluZyk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBSZW5kZXIgYnkgbnpDaGVja2VkS2V5c1xuICAgICAqIFdoZW4ga2V5cyBlcXVhbHMgbnVsbCwganVzdCByZW5kZXIgd2l0aCBjaGVja1N0cmljdGx5XG4gICAgICogQHBhcmFtIGtleXNcbiAgICAgKiBAcGFyYW0gY2hlY2tTdHJpY3RseVxuICAgICAqL1xuICAgIGNvbmR1Y3RDaGVjayhrZXlzOiBOelRyZWVOb2RlS2V5W10gfCBudWxsLCBjaGVja1N0cmljdGx5OiBib29sZWFuKTogdm9pZDtcbiAgICBjb25kdWN0RXhwYW5kZWRLZXlzKGtleXM/OiBOelRyZWVOb2RlS2V5W10gfCB0cnVlKTogdm9pZDtcbiAgICBjb25kdWN0U2VsZWN0ZWRLZXlzKGtleXM6IE56VHJlZU5vZGVLZXlbXSwgaXNNdWx0aTogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRXhwYW5kIHBhcmVudCBub2RlcyBieSBjaGlsZCBub2RlXG4gICAgICogQHBhcmFtIG5vZGVcbiAgICAgKi9cbiAgICBleHBhbmROb2RlQWxsUGFyZW50QnlTZWFyY2gobm9kZTogTnpUcmVlTm9kZSk6IHZvaWQ7XG59XG4iXX0=