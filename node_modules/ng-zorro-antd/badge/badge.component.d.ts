/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ContentObserver } from '@angular/cdk/observers';
import { AfterViewInit, ChangeDetectorRef, ElementRef, NgZone, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef } from '@angular/core';
import { NzConfigService } from 'ng-zorro-antd/core/config';
import { BooleanInput, NzSafeAny } from 'ng-zorro-antd/core/types';
import { NzBadgeStatusType } from './types';
import * as ɵngcc0 from '@angular/core';
export declare class NzBadgeComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {
    nzConfigService: NzConfigService;
    private renderer;
    private elementRef;
    private contentObserver;
    private cdr;
    private ngZone;
    static ngAcceptInputType_nzShowZero: BooleanInput;
    static ngAcceptInputType_nzShowDot: BooleanInput;
    static ngAcceptInputType_nzDot: BooleanInput;
    private destroy$;
    notWrapper: boolean;
    viewInit: boolean;
    maxNumberArray: string[];
    countArray: number[];
    countSingleArray: number[];
    presetColor: string | null;
    count: number;
    contentElement?: ElementRef;
    nzShowZero: boolean;
    nzShowDot: boolean;
    nzDot: boolean;
    nzOverflowCount: number;
    nzColor?: string;
    nzStyle: {
        [key: string]: string;
    } | null;
    nzText?: string;
    nzTitle?: string | null | undefined;
    nzStatus?: NzBadgeStatusType | string;
    nzCount?: number | TemplateRef<NzSafeAny>;
    nzOffset?: [number, number];
    checkContent(): void;
    get showSup(): boolean;
    generateMaxNumberArray(): void;
    constructor(nzConfigService: NzConfigService, renderer: Renderer2, elementRef: ElementRef, contentObserver: ContentObserver, cdr: ChangeDetectorRef, ngZone: NgZone);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzBadgeComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzBadgeComponent, "nz-badge", ["nzBadge"], {
    "nzShowZero": "nzShowZero";
    "nzShowDot": "nzShowDot";
    "nzDot": "nzDot";
    "nzOverflowCount": "nzOverflowCount";
    "nzColor": "nzColor";
    "nzStyle": "nzStyle";
    "nzText": "nzText";
    "nzTitle": "nzTitle";
    "nzStatus": "nzStatus";
    "nzCount": "nzCount";
    "nzOffset": "nzOffset";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFkZ2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImJhZGdlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBU0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5pbXBvcnQgeyBDb250ZW50T2JzZXJ2ZXIgfSBmcm9tICdAYW5ndWxhci9jZGsvb2JzZXJ2ZXJzJztcbmltcG9ydCB7IEFmdGVyVmlld0luaXQsIENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBOZ1pvbmUsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFJlbmRlcmVyMiwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE56Q29uZmlnU2VydmljZSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS9jb25maWcnO1xuaW1wb3J0IHsgQm9vbGVhbklucHV0LCBOelNhZmVBbnkgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHsgTnpCYWRnZVN0YXR1c1R5cGUgfSBmcm9tICcuL3R5cGVzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE56QmFkZ2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBuekNvbmZpZ1NlcnZpY2U6IE56Q29uZmlnU2VydmljZTtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgZWxlbWVudFJlZjtcbiAgICBwcml2YXRlIGNvbnRlbnRPYnNlcnZlcjtcbiAgICBwcml2YXRlIGNkcjtcbiAgICBwcml2YXRlIG5nWm9uZTtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfbnpTaG93WmVybzogQm9vbGVhbklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uelNob3dEb3Q6IEJvb2xlYW5JbnB1dDtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfbnpEb3Q6IEJvb2xlYW5JbnB1dDtcbiAgICBwcml2YXRlIGRlc3Ryb3kkO1xuICAgIG5vdFdyYXBwZXI6IGJvb2xlYW47XG4gICAgdmlld0luaXQ6IGJvb2xlYW47XG4gICAgbWF4TnVtYmVyQXJyYXk6IHN0cmluZ1tdO1xuICAgIGNvdW50QXJyYXk6IG51bWJlcltdO1xuICAgIGNvdW50U2luZ2xlQXJyYXk6IG51bWJlcltdO1xuICAgIHByZXNldENvbG9yOiBzdHJpbmcgfCBudWxsO1xuICAgIGNvdW50OiBudW1iZXI7XG4gICAgY29udGVudEVsZW1lbnQ/OiBFbGVtZW50UmVmO1xuICAgIG56U2hvd1plcm86IGJvb2xlYW47XG4gICAgbnpTaG93RG90OiBib29sZWFuO1xuICAgIG56RG90OiBib29sZWFuO1xuICAgIG56T3ZlcmZsb3dDb3VudDogbnVtYmVyO1xuICAgIG56Q29sb3I/OiBzdHJpbmc7XG4gICAgbnpTdHlsZToge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG4gICAgfSB8IG51bGw7XG4gICAgbnpUZXh0Pzogc3RyaW5nO1xuICAgIG56VGl0bGU/OiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkO1xuICAgIG56U3RhdHVzPzogTnpCYWRnZVN0YXR1c1R5cGUgfCBzdHJpbmc7XG4gICAgbnpDb3VudD86IG51bWJlciB8IFRlbXBsYXRlUmVmPE56U2FmZUFueT47XG4gICAgbnpPZmZzZXQ/OiBbbnVtYmVyLCBudW1iZXJdO1xuICAgIGNoZWNrQ29udGVudCgpOiB2b2lkO1xuICAgIGdldCBzaG93U3VwKCk6IGJvb2xlYW47XG4gICAgZ2VuZXJhdGVNYXhOdW1iZXJBcnJheSgpOiB2b2lkO1xuICAgIGNvbnN0cnVjdG9yKG56Q29uZmlnU2VydmljZTogTnpDb25maWdTZXJ2aWNlLCByZW5kZXJlcjogUmVuZGVyZXIyLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBjb250ZW50T2JzZXJ2ZXI6IENvbnRlbnRPYnNlcnZlciwgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZiwgbmdab25lOiBOZ1pvbmUpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==