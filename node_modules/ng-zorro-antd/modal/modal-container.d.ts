/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { AnimationEvent } from '@angular/animations';
import { ConfigurableFocusTrapFactory } from '@angular/cdk/a11y';
import { OverlayRef } from '@angular/cdk/overlay';
import { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';
import { ChangeDetectorRef, ComponentRef, ElementRef, EmbeddedViewRef, EventEmitter, OnDestroy, Renderer2 } from '@angular/core';
import { NzConfigService } from 'ng-zorro-antd/core/config';
import { NzSafeAny } from 'ng-zorro-antd/core/types';
import { Subject } from 'rxjs';
import { NzModalRef } from './modal-ref';
import { ModalOptions } from './modal-types';
import * as ɵngcc0 from '@angular/core';
export declare function throwNzModalContentAlreadyAttachedError(): never;
export declare class BaseModalContainer extends BasePortalOutlet implements OnDestroy {
    protected elementRef: ElementRef;
    protected focusTrapFactory: ConfigurableFocusTrapFactory;
    cdr: ChangeDetectorRef;
    protected render: Renderer2;
    protected overlayRef: OverlayRef;
    protected nzConfigService: NzConfigService;
    config: ModalOptions;
    protected animationType?: string | undefined;
    portalOutlet: CdkPortalOutlet;
    modalElementRef: ElementRef<HTMLDivElement>;
    animationStateChanged: EventEmitter<AnimationEvent>;
    containerClick: EventEmitter<void>;
    cancelTriggered: EventEmitter<void>;
    okTriggered: EventEmitter<void>;
    state: 'void' | 'enter' | 'exit';
    document: Document;
    modalRef: NzModalRef;
    isStringContent: boolean;
    private elementFocusedBeforeModalWasOpened;
    private focusTrap;
    private mouseDown;
    private oldMaskStyle;
    protected destroy$: Subject<unknown>;
    get showMask(): boolean;
    get maskClosable(): boolean;
    constructor(elementRef: ElementRef, focusTrapFactory: ConfigurableFocusTrapFactory, cdr: ChangeDetectorRef, render: Renderer2, overlayRef: OverlayRef, nzConfigService: NzConfigService, config: ModalOptions, document?: NzSafeAny, animationType?: string | undefined);
    onContainerClick(e: MouseEvent): void;
    onMousedown(): void;
    onMouseup(): void;
    onCloseClick(): void;
    onOkClick(): void;
    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;
    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;
    attachStringContent(): void;
    getNativeElement(): HTMLElement;
    private animationDisabled;
    private setModalTransformOrigin;
    private savePreviouslyFocusedElement;
    private trapFocus;
    private restoreFocus;
    private setEnterAnimationClass;
    private setExitAnimationClass;
    private setMaskExitAnimationClass;
    private cleanAnimationClass;
    bindBackdropStyle(): void;
    /**
     * Set the container element.
     * @deprecated Not supported.
     * @breaking-change 10.0.0
     */
    private setContainer;
    /**
     * Reset the container element.
     * @deprecated Not supported.
     * @breaking-change 10.0.0
     */
    private resetContainer;
    private getContainer;
    updateMaskClassname(): void;
    onAnimationDone(event: AnimationEvent): void;
    onAnimationStart(event: AnimationEvent): void;
    startExitAnimation(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BaseModalContainer>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<BaseModalContainer, never, never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtY29udGFpbmVyLmQudHMiLCJzb3VyY2VzIjpbIm1vZGFsLWNvbnRhaW5lci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFjQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlFQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5pbXBvcnQgeyBBbmltYXRpb25FdmVudCB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgQ29uZmlndXJhYmxlRm9jdXNUcmFwRmFjdG9yeSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcbmltcG9ydCB7IE92ZXJsYXlSZWYgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQgeyBCYXNlUG9ydGFsT3V0bGV0LCBDZGtQb3J0YWxPdXRsZXQsIENvbXBvbmVudFBvcnRhbCwgVGVtcGxhdGVQb3J0YWwgfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnRSZWYsIEVsZW1lbnRSZWYsIEVtYmVkZGVkVmlld1JlZiwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnpDb25maWdTZXJ2aWNlIH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL2NvbmZpZyc7XG5pbXBvcnQgeyBOelNhZmVBbnkgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTnpNb2RhbFJlZiB9IGZyb20gJy4vbW9kYWwtcmVmJztcbmltcG9ydCB7IE1vZGFsT3B0aW9ucyB9IGZyb20gJy4vbW9kYWwtdHlwZXMnO1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gdGhyb3dOek1vZGFsQ29udGVudEFscmVhZHlBdHRhY2hlZEVycm9yKCk6IG5ldmVyO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQmFzZU1vZGFsQ29udGFpbmVyIGV4dGVuZHMgQmFzZVBvcnRhbE91dGxldCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY7XG4gICAgcHJvdGVjdGVkIGZvY3VzVHJhcEZhY3Rvcnk6IENvbmZpZ3VyYWJsZUZvY3VzVHJhcEZhY3Rvcnk7XG4gICAgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBwcm90ZWN0ZWQgcmVuZGVyOiBSZW5kZXJlcjI7XG4gICAgcHJvdGVjdGVkIG92ZXJsYXlSZWY6IE92ZXJsYXlSZWY7XG4gICAgcHJvdGVjdGVkIG56Q29uZmlnU2VydmljZTogTnpDb25maWdTZXJ2aWNlO1xuICAgIGNvbmZpZzogTW9kYWxPcHRpb25zO1xuICAgIHByb3RlY3RlZCBhbmltYXRpb25UeXBlPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIHBvcnRhbE91dGxldDogQ2RrUG9ydGFsT3V0bGV0O1xuICAgIG1vZGFsRWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRGl2RWxlbWVudD47XG4gICAgYW5pbWF0aW9uU3RhdGVDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8QW5pbWF0aW9uRXZlbnQ+O1xuICAgIGNvbnRhaW5lckNsaWNrOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgY2FuY2VsVHJpZ2dlcmVkOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgb2tUcmlnZ2VyZWQ6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICBzdGF0ZTogJ3ZvaWQnIHwgJ2VudGVyJyB8ICdleGl0JztcbiAgICBkb2N1bWVudDogRG9jdW1lbnQ7XG4gICAgbW9kYWxSZWY6IE56TW9kYWxSZWY7XG4gICAgaXNTdHJpbmdDb250ZW50OiBib29sZWFuO1xuICAgIHByaXZhdGUgZWxlbWVudEZvY3VzZWRCZWZvcmVNb2RhbFdhc09wZW5lZDtcbiAgICBwcml2YXRlIGZvY3VzVHJhcDtcbiAgICBwcml2YXRlIG1vdXNlRG93bjtcbiAgICBwcml2YXRlIG9sZE1hc2tTdHlsZTtcbiAgICBwcm90ZWN0ZWQgZGVzdHJveSQ6IFN1YmplY3Q8dW5rbm93bj47XG4gICAgZ2V0IHNob3dNYXNrKCk6IGJvb2xlYW47XG4gICAgZ2V0IG1hc2tDbG9zYWJsZSgpOiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIGZvY3VzVHJhcEZhY3Rvcnk6IENvbmZpZ3VyYWJsZUZvY3VzVHJhcEZhY3RvcnksIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHJlbmRlcjogUmVuZGVyZXIyLCBvdmVybGF5UmVmOiBPdmVybGF5UmVmLCBuekNvbmZpZ1NlcnZpY2U6IE56Q29uZmlnU2VydmljZSwgY29uZmlnOiBNb2RhbE9wdGlvbnMsIGRvY3VtZW50PzogTnpTYWZlQW55LCBhbmltYXRpb25UeXBlPzogc3RyaW5nIHwgdW5kZWZpbmVkKTtcbiAgICBvbkNvbnRhaW5lckNsaWNrKGU6IE1vdXNlRXZlbnQpOiB2b2lkO1xuICAgIG9uTW91c2Vkb3duKCk6IHZvaWQ7XG4gICAgb25Nb3VzZXVwKCk6IHZvaWQ7XG4gICAgb25DbG9zZUNsaWNrKCk6IHZvaWQ7XG4gICAgb25Pa0NsaWNrKCk6IHZvaWQ7XG4gICAgYXR0YWNoQ29tcG9uZW50UG9ydGFsPFQ+KHBvcnRhbDogQ29tcG9uZW50UG9ydGFsPFQ+KTogQ29tcG9uZW50UmVmPFQ+O1xuICAgIGF0dGFjaFRlbXBsYXRlUG9ydGFsPEM+KHBvcnRhbDogVGVtcGxhdGVQb3J0YWw8Qz4pOiBFbWJlZGRlZFZpZXdSZWY8Qz47XG4gICAgYXR0YWNoU3RyaW5nQ29udGVudCgpOiB2b2lkO1xuICAgIGdldE5hdGl2ZUVsZW1lbnQoKTogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBhbmltYXRpb25EaXNhYmxlZDtcbiAgICBwcml2YXRlIHNldE1vZGFsVHJhbnNmb3JtT3JpZ2luO1xuICAgIHByaXZhdGUgc2F2ZVByZXZpb3VzbHlGb2N1c2VkRWxlbWVudDtcbiAgICBwcml2YXRlIHRyYXBGb2N1cztcbiAgICBwcml2YXRlIHJlc3RvcmVGb2N1cztcbiAgICBwcml2YXRlIHNldEVudGVyQW5pbWF0aW9uQ2xhc3M7XG4gICAgcHJpdmF0ZSBzZXRFeGl0QW5pbWF0aW9uQ2xhc3M7XG4gICAgcHJpdmF0ZSBzZXRNYXNrRXhpdEFuaW1hdGlvbkNsYXNzO1xuICAgIHByaXZhdGUgY2xlYW5BbmltYXRpb25DbGFzcztcbiAgICBiaW5kQmFja2Ryb3BTdHlsZSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgY29udGFpbmVyIGVsZW1lbnQuXG4gICAgICogQGRlcHJlY2F0ZWQgTm90IHN1cHBvcnRlZC5cbiAgICAgKiBAYnJlYWtpbmctY2hhbmdlIDEwLjAuMFxuICAgICAqL1xuICAgIHByaXZhdGUgc2V0Q29udGFpbmVyO1xuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSBjb250YWluZXIgZWxlbWVudC5cbiAgICAgKiBAZGVwcmVjYXRlZCBOb3Qgc3VwcG9ydGVkLlxuICAgICAqIEBicmVha2luZy1jaGFuZ2UgMTAuMC4wXG4gICAgICovXG4gICAgcHJpdmF0ZSByZXNldENvbnRhaW5lcjtcbiAgICBwcml2YXRlIGdldENvbnRhaW5lcjtcbiAgICB1cGRhdGVNYXNrQ2xhc3NuYW1lKCk6IHZvaWQ7XG4gICAgb25BbmltYXRpb25Eb25lKGV2ZW50OiBBbmltYXRpb25FdmVudCk6IHZvaWQ7XG4gICAgb25BbmltYXRpb25TdGFydChldmVudDogQW5pbWF0aW9uRXZlbnQpOiB2b2lkO1xuICAgIHN0YXJ0RXhpdEFuaW1hdGlvbigpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG4iXX0=