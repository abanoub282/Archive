/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { OverlayRef } from '@angular/cdk/overlay';
import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges, TemplateRef, Type, ViewContainerRef } from '@angular/core';
import { NzButtonType } from 'ng-zorro-antd/button';
import { BooleanInput, NzSafeAny } from 'ng-zorro-antd/core/types';
import { Observable } from 'rxjs';
import { NzModalFooterDirective } from './modal-footer.directive';
import { NzModalLegacyAPI } from './modal-legacy-api';
import { NzModalRef } from './modal-ref';
import { ModalButtonOptions, ModalTypes, OnClickCallback, StyleObjectLike } from './modal-types';
import { NzModalService } from './modal.service';
import * as ɵngcc0 from '@angular/core';
export declare class NzModalComponent<T = NzSafeAny, R = NzSafeAny> implements OnChanges, NzModalLegacyAPI<T, R>, OnDestroy {
    private cdr;
    private modal;
    private viewContainerRef;
    static ngAcceptInputType_nzMask: BooleanInput;
    static ngAcceptInputType_nzMaskClosable: BooleanInput;
    static ngAcceptInputType_nzCloseOnNavigation: BooleanInput;
    static ngAcceptInputType_nzVisible: BooleanInput;
    static ngAcceptInputType_nzClosable: BooleanInput;
    static ngAcceptInputType_nzOkLoading: BooleanInput;
    static ngAcceptInputType_nzOkDisabled: BooleanInput;
    static ngAcceptInputType_nzCancelDisabled: BooleanInput;
    static ngAcceptInputType_nzCancelLoading: BooleanInput;
    static ngAcceptInputType_nzKeyboard: BooleanInput;
    static ngAcceptInputType_nzNoAnimation: BooleanInput;
    nzMask?: boolean;
    nzMaskClosable?: boolean;
    nzCloseOnNavigation?: boolean;
    nzVisible: boolean;
    nzClosable: boolean;
    nzOkLoading: boolean;
    nzOkDisabled: boolean;
    nzCancelDisabled: boolean;
    nzCancelLoading: boolean;
    nzKeyboard: boolean;
    nzNoAnimation: boolean;
    nzContent?: string | TemplateRef<{}> | Type<T>;
    nzComponentParams?: T;
    nzFooter?: string | TemplateRef<{}> | Array<ModalButtonOptions<T>> | null;
    nzGetContainer?: HTMLElement | OverlayRef | (() => HTMLElement | OverlayRef);
    nzZIndex: number;
    nzWidth: number | string;
    nzWrapClassName?: string;
    nzClassName?: string;
    nzStyle?: object;
    nzTitle?: string | TemplateRef<{}>;
    nzCloseIcon: string | TemplateRef<void>;
    nzMaskStyle?: StyleObjectLike;
    nzBodyStyle?: StyleObjectLike;
    nzOkText?: string | null;
    nzCancelText?: string | null;
    nzOkType: NzButtonType;
    nzIconType: string;
    nzModalType: ModalTypes;
    nzAutofocus: 'ok' | 'cancel' | 'auto' | null;
    readonly nzOnOk: EventEmitter<T> | OnClickCallback<T> | NzSafeAny;
    readonly nzOnCancel: EventEmitter<T> | OnClickCallback<T> | NzSafeAny;
    readonly nzAfterOpen: EventEmitter<void>;
    readonly nzAfterClose: EventEmitter<R>;
    readonly nzVisibleChange: EventEmitter<boolean>;
    contentTemplateRef: TemplateRef<{}>;
    set modalFooter(value: NzModalFooterDirective);
    private modalRef;
    get afterOpen(): Observable<void>;
    get afterClose(): Observable<R>;
    constructor(cdr: ChangeDetectorRef, modal: NzModalService, viewContainerRef: ViewContainerRef);
    open(): void;
    close(result?: R): void;
    destroy(result?: R): void;
    triggerOk(): void;
    triggerCancel(): void;
    getContentComponent(): T | void;
    getElement(): HTMLElement | void;
    getModalRef(): NzModalRef | null;
    private setFooterWithTemplate;
    private getConfig;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzModalComponent<any, any>>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzModalComponent<any, any>, "nz-modal", ["nzModal"], {
    "nzVisible": "nzVisible";
    "nzClosable": "nzClosable";
    "nzOkLoading": "nzOkLoading";
    "nzOkDisabled": "nzOkDisabled";
    "nzCancelDisabled": "nzCancelDisabled";
    "nzCancelLoading": "nzCancelLoading";
    "nzKeyboard": "nzKeyboard";
    "nzNoAnimation": "nzNoAnimation";
    "nzZIndex": "nzZIndex";
    "nzWidth": "nzWidth";
    "nzCloseIcon": "nzCloseIcon";
    "nzOkType": "nzOkType";
    "nzIconType": "nzIconType";
    "nzModalType": "nzModalType";
    "nzAutofocus": "nzAutofocus";
    "nzOnOk": "nzOnOk";
    "nzOnCancel": "nzOnCancel";
    "nzFooter": "nzFooter";
    "nzMask": "nzMask";
    "nzMaskClosable": "nzMaskClosable";
    "nzCloseOnNavigation": "nzCloseOnNavigation";
    "nzContent": "nzContent";
    "nzComponentParams": "nzComponentParams";
    "nzGetContainer": "nzGetContainer";
    "nzWrapClassName": "nzWrapClassName";
    "nzClassName": "nzClassName";
    "nzStyle": "nzStyle";
    "nzTitle": "nzTitle";
    "nzMaskStyle": "nzMaskStyle";
    "nzBodyStyle": "nzBodyStyle";
    "nzOkText": "nzOkText";
    "nzCancelText": "nzCancelText";
}, {
    "nzOnOk": "nzOnOk";
    "nzOnCancel": "nzOnCancel";
    "nzAfterOpen": "nzAfterOpen";
    "nzAfterClose": "nzAfterClose";
    "nzVisibleChange": "nzVisibleChange";
}, ["modalFooter"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm1vZGFsLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFjQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9FQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5pbXBvcnQgeyBPdmVybGF5UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMsIFRlbXBsYXRlUmVmLCBUeXBlLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOekJ1dHRvblR5cGUgfSBmcm9tICduZy16b3Jyby1hbnRkL2J1dHRvbic7XG5pbXBvcnQgeyBCb29sZWFuSW5wdXQsIE56U2FmZUFueSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS90eXBlcyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOek1vZGFsRm9vdGVyRGlyZWN0aXZlIH0gZnJvbSAnLi9tb2RhbC1mb290ZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IE56TW9kYWxMZWdhY3lBUEkgfSBmcm9tICcuL21vZGFsLWxlZ2FjeS1hcGknO1xuaW1wb3J0IHsgTnpNb2RhbFJlZiB9IGZyb20gJy4vbW9kYWwtcmVmJztcbmltcG9ydCB7IE1vZGFsQnV0dG9uT3B0aW9ucywgTW9kYWxUeXBlcywgT25DbGlja0NhbGxiYWNrLCBTdHlsZU9iamVjdExpa2UgfSBmcm9tICcuL21vZGFsLXR5cGVzJztcbmltcG9ydCB7IE56TW9kYWxTZXJ2aWNlIH0gZnJvbSAnLi9tb2RhbC5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE56TW9kYWxDb21wb25lbnQ8VCA9IE56U2FmZUFueSwgUiA9IE56U2FmZUFueT4gaW1wbGVtZW50cyBPbkNoYW5nZXMsIE56TW9kYWxMZWdhY3lBUEk8VCwgUj4sIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBjZHI7XG4gICAgcHJpdmF0ZSBtb2RhbDtcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256TWFzazogQm9vbGVhbklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uek1hc2tDbG9zYWJsZTogQm9vbGVhbklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uekNsb3NlT25OYXZpZ2F0aW9uOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256VmlzaWJsZTogQm9vbGVhbklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uekNsb3NhYmxlOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256T2tMb2FkaW5nOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256T2tEaXNhYmxlZDogQm9vbGVhbklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uekNhbmNlbERpc2FibGVkOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256Q2FuY2VsTG9hZGluZzogQm9vbGVhbklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uektleWJvYXJkOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256Tm9BbmltYXRpb246IEJvb2xlYW5JbnB1dDtcbiAgICBuek1hc2s/OiBib29sZWFuO1xuICAgIG56TWFza0Nsb3NhYmxlPzogYm9vbGVhbjtcbiAgICBuekNsb3NlT25OYXZpZ2F0aW9uPzogYm9vbGVhbjtcbiAgICBuelZpc2libGU6IGJvb2xlYW47XG4gICAgbnpDbG9zYWJsZTogYm9vbGVhbjtcbiAgICBuek9rTG9hZGluZzogYm9vbGVhbjtcbiAgICBuek9rRGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgbnpDYW5jZWxEaXNhYmxlZDogYm9vbGVhbjtcbiAgICBuekNhbmNlbExvYWRpbmc6IGJvb2xlYW47XG4gICAgbnpLZXlib2FyZDogYm9vbGVhbjtcbiAgICBuek5vQW5pbWF0aW9uOiBib29sZWFuO1xuICAgIG56Q29udGVudD86IHN0cmluZyB8IFRlbXBsYXRlUmVmPHt9PiB8IFR5cGU8VD47XG4gICAgbnpDb21wb25lbnRQYXJhbXM/OiBUO1xuICAgIG56Rm9vdGVyPzogc3RyaW5nIHwgVGVtcGxhdGVSZWY8e30+IHwgQXJyYXk8TW9kYWxCdXR0b25PcHRpb25zPFQ+PiB8IG51bGw7XG4gICAgbnpHZXRDb250YWluZXI/OiBIVE1MRWxlbWVudCB8IE92ZXJsYXlSZWYgfCAoKCkgPT4gSFRNTEVsZW1lbnQgfCBPdmVybGF5UmVmKTtcbiAgICBuelpJbmRleDogbnVtYmVyO1xuICAgIG56V2lkdGg6IG51bWJlciB8IHN0cmluZztcbiAgICBueldyYXBDbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgbnpDbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgbnpTdHlsZT86IG9iamVjdDtcbiAgICBuelRpdGxlPzogc3RyaW5nIHwgVGVtcGxhdGVSZWY8e30+O1xuICAgIG56Q2xvc2VJY29uOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPjtcbiAgICBuek1hc2tTdHlsZT86IFN0eWxlT2JqZWN0TGlrZTtcbiAgICBuekJvZHlTdHlsZT86IFN0eWxlT2JqZWN0TGlrZTtcbiAgICBuek9rVGV4dD86IHN0cmluZyB8IG51bGw7XG4gICAgbnpDYW5jZWxUZXh0Pzogc3RyaW5nIHwgbnVsbDtcbiAgICBuek9rVHlwZTogTnpCdXR0b25UeXBlO1xuICAgIG56SWNvblR5cGU6IHN0cmluZztcbiAgICBuek1vZGFsVHlwZTogTW9kYWxUeXBlcztcbiAgICBuekF1dG9mb2N1czogJ29rJyB8ICdjYW5jZWwnIHwgJ2F1dG8nIHwgbnVsbDtcbiAgICByZWFkb25seSBuek9uT2s6IEV2ZW50RW1pdHRlcjxUPiB8IE9uQ2xpY2tDYWxsYmFjazxUPiB8IE56U2FmZUFueTtcbiAgICByZWFkb25seSBuek9uQ2FuY2VsOiBFdmVudEVtaXR0ZXI8VD4gfCBPbkNsaWNrQ2FsbGJhY2s8VD4gfCBOelNhZmVBbnk7XG4gICAgcmVhZG9ubHkgbnpBZnRlck9wZW46IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICByZWFkb25seSBuekFmdGVyQ2xvc2U6IEV2ZW50RW1pdHRlcjxSPjtcbiAgICByZWFkb25seSBuelZpc2libGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICBjb250ZW50VGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPHt9PjtcbiAgICBzZXQgbW9kYWxGb290ZXIodmFsdWU6IE56TW9kYWxGb290ZXJEaXJlY3RpdmUpO1xuICAgIHByaXZhdGUgbW9kYWxSZWY7XG4gICAgZ2V0IGFmdGVyT3BlbigpOiBPYnNlcnZhYmxlPHZvaWQ+O1xuICAgIGdldCBhZnRlckNsb3NlKCk6IE9ic2VydmFibGU8Uj47XG4gICAgY29uc3RydWN0b3IoY2RyOiBDaGFuZ2VEZXRlY3RvclJlZiwgbW9kYWw6IE56TW9kYWxTZXJ2aWNlLCB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmKTtcbiAgICBvcGVuKCk6IHZvaWQ7XG4gICAgY2xvc2UocmVzdWx0PzogUik6IHZvaWQ7XG4gICAgZGVzdHJveShyZXN1bHQ/OiBSKTogdm9pZDtcbiAgICB0cmlnZ2VyT2soKTogdm9pZDtcbiAgICB0cmlnZ2VyQ2FuY2VsKCk6IHZvaWQ7XG4gICAgZ2V0Q29udGVudENvbXBvbmVudCgpOiBUIHwgdm9pZDtcbiAgICBnZXRFbGVtZW50KCk6IEhUTUxFbGVtZW50IHwgdm9pZDtcbiAgICBnZXRNb2RhbFJlZigpOiBOek1vZGFsUmVmIHwgbnVsbDtcbiAgICBwcml2YXRlIHNldEZvb3RlcldpdGhUZW1wbGF0ZTtcbiAgICBwcml2YXRlIGdldENvbmZpZztcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19