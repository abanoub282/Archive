import * as ɵngcc0 from '@angular/core';
export declare class NgxPrintDirective {
    _printStyle: any[];
    /**
     *
     *
     * @memberof NgxPrintDirective
     */
    printSectionId: string;
    /**
     *
     *
     * @memberof NgxPrintDirective
     */
    printTitle: string;
    /**
     *
     *
     * @memberof NgxPrintDirective
     */
    useExistingCss: boolean;
    /**
     * A delay in milliseconds to force the print dialog to wait before opened. Default: 0
     *
     * @memberof NgxPrintDirective
     */
    printDelay: number;
    /**
     *
     *
     * @memberof NgxPrintDirective
     */
    printStyle: {
        [key: string]: {
            [key: string]: string;
        };
    };
    /**
     *
     *
     * @returns the string that create the stylesheet which will be injected
     * later within <style></style> tag.
     *
     * -join/replace to transform an array objects to css-styled string
     *
     * @memberof NgxPrintDirective
     */
    returnStyleValues(): string;
    /**
     *
     *
     * @returns html for the given tag
     *
     * @memberof NgxPrintDirective
     */
    private _styleSheetFile;
    /**
     * @memberof NgxPrintDirective
     * @param cssList
     */
    styleSheetFile: string;
    /**
     * @returns string which contains the link tags containing the css which will
     * be injected later within <head></head> tag.
     *
     */
    private returnStyleSheetLinkTags;
    private getElementTag;
    /**
     *
     * @param data the html element collection to save defaults to
     *
     */
    private getFormData;
    /**
     * @returns html section to be printed along with some associated inputs
     *
     */
    private getHtmlContents;
    /**
     *
     *
     * @memberof NgxPrintDirective
     */
    print(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxPrintDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NgxPrintDirective, "button[ngxPrint]", never, {
    "useExistingCss": "useExistingCss";
    "printDelay": "printDelay";
    "printStyle": "printStyle";
    "styleSheetFile": "styleSheetFile";
    "printSectionId": "printSectionId";
    "printTitle": "printTitle";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByaW50LmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJuZ3gtcHJpbnQuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvRkEiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hQcmludERpcmVjdGl2ZSB7XHJcbiAgICBfcHJpbnRTdHlsZTogYW55W107XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlcm9mIE5neFByaW50RGlyZWN0aXZlXHJcbiAgICAgKi9cclxuICAgIHByaW50U2VjdGlvbklkOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlcm9mIE5neFByaW50RGlyZWN0aXZlXHJcbiAgICAgKi9cclxuICAgIHByaW50VGl0bGU6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyb2YgTmd4UHJpbnREaXJlY3RpdmVcclxuICAgICAqL1xyXG4gICAgdXNlRXhpc3RpbmdDc3M6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEEgZGVsYXkgaW4gbWlsbGlzZWNvbmRzIHRvIGZvcmNlIHRoZSBwcmludCBkaWFsb2cgdG8gd2FpdCBiZWZvcmUgb3BlbmVkLiBEZWZhdWx0OiAwXHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlcm9mIE5neFByaW50RGlyZWN0aXZlXHJcbiAgICAgKi9cclxuICAgIHByaW50RGVsYXk6IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyb2YgTmd4UHJpbnREaXJlY3RpdmVcclxuICAgICAqL1xyXG4gICAgcHJpbnRTdHlsZToge1xyXG4gICAgICAgIFtrZXk6IHN0cmluZ106IHtcclxuICAgICAgICAgICAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHRoZSBzdHJpbmcgdGhhdCBjcmVhdGUgdGhlIHN0eWxlc2hlZXQgd2hpY2ggd2lsbCBiZSBpbmplY3RlZFxyXG4gICAgICogbGF0ZXIgd2l0aGluIDxzdHlsZT48L3N0eWxlPiB0YWcuXHJcbiAgICAgKlxyXG4gICAgICogLWpvaW4vcmVwbGFjZSB0byB0cmFuc2Zvcm0gYW4gYXJyYXkgb2JqZWN0cyB0byBjc3Mtc3R5bGVkIHN0cmluZ1xyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJvZiBOZ3hQcmludERpcmVjdGl2ZVxyXG4gICAgICovXHJcbiAgICByZXR1cm5TdHlsZVZhbHVlcygpOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMgaHRtbCBmb3IgdGhlIGdpdmVuIHRhZ1xyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJvZiBOZ3hQcmludERpcmVjdGl2ZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9zdHlsZVNoZWV0RmlsZTtcclxuICAgIC8qKlxyXG4gICAgICogQG1lbWJlcm9mIE5neFByaW50RGlyZWN0aXZlXHJcbiAgICAgKiBAcGFyYW0gY3NzTGlzdFxyXG4gICAgICovXHJcbiAgICBzdHlsZVNoZWV0RmlsZTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJucyBzdHJpbmcgd2hpY2ggY29udGFpbnMgdGhlIGxpbmsgdGFncyBjb250YWluaW5nIHRoZSBjc3Mgd2hpY2ggd2lsbFxyXG4gICAgICogYmUgaW5qZWN0ZWQgbGF0ZXIgd2l0aGluIDxoZWFkPjwvaGVhZD4gdGFnLlxyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSByZXR1cm5TdHlsZVNoZWV0TGlua1RhZ3M7XHJcbiAgICBwcml2YXRlIGdldEVsZW1lbnRUYWc7XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZGF0YSB0aGUgaHRtbCBlbGVtZW50IGNvbGxlY3Rpb24gdG8gc2F2ZSBkZWZhdWx0cyB0b1xyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXRGb3JtRGF0YTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybnMgaHRtbCBzZWN0aW9uIHRvIGJlIHByaW50ZWQgYWxvbmcgd2l0aCBzb21lIGFzc29jaWF0ZWQgaW5wdXRzXHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldEh0bWxDb250ZW50cztcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyb2YgTmd4UHJpbnREaXJlY3RpdmVcclxuICAgICAqL1xyXG4gICAgcHJpbnQoKTogdm9pZDtcclxufVxyXG4iXX0=